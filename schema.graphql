enum RewardTokenType {
  " For reward tokens awarded to LPs/lenders "
  DEPOSIT
  " For reward tokens awarded to borrowers "
  BORROW
}

###########################
#### Deployer Metadata ####
###########################

type Deployer @entity {
  " Smart contract address of the Deployer "
  id: ID!

  " Deployer version, in SemVer format (e.g. 2.1.0)"
  deployerVersion: String!

  " Block number of Deployer registration "
  blockNumber: BigInt!
}

#############################
##### Protocol Metadata #####
#############################

type Protocol @entity {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: ID!

  " Name of the protocol, including version. e.g. Uniswap v3 "
  name: String!

  " Slug of protocol, including version. e.g. uniswap-v3 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  " Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) "
  methodologyVersion: String!

  ##### Quantitative Data #####

  " RSR amount currently locked on the protocol "
  rsrStaked: BigInt!

  " RSR amount currently locked on the protocol "
  rsrLocked: BigInt!

  " USD equivalent RSR staked amount on the protocol "
  rsrStakedUSD: BigDecimal!

  " USD equivalent RSR locked amount on the protocol "
  rsrLockedUSD: BigDecimal!

  " Current TVL (Total Value Locked) of the entire protocol "
  totalValueLockedUSD: BigDecimal!

  " cumulativeVolumeUSD token transfers value "
  cumulativeVolumeUSD: BigDecimal!

  " Revenue given to RToken holders "
  cumulativeRTokenRevenueUSD: BigDecimal!

  " Revenue given to RSR Stakers "
  cumulativeRSRRevenueUSD: BigDecimal!

  " Total distributed rsr revenue to stakers "
  rsrRevenue: BigDecimal!

  " All revenue generated by the protocol from the collateral yield "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Total amount of RSR that has been staked across all rTokens "
  totalRsrStaked: BigInt!

  " Total USD of staked rsr "
  totalRsrStakedUSD: BigDecimal!

  " Total RSR staked "
  totalRsrUnstaked: BigInt!

  " Total USD of stake rsr "
  totalRsrUnstakedUSD: BigDecimal!

  " Total rToken usd value "
  totalRTokenUSD: BigDecimal!

  " Total number of rTokens "
  rTokenCount: Int!

  " Total number of transactions across all rTokens "
  transactionCount: BigInt!

  ##### Snapshots #####

  " Daily usage metrics for this protocol "
  dailyUsageMetrics: [UsageMetricsDailySnapshot!]!
    @derivedFrom(field: "protocol")

  " Hourly usage metrics for this protocol "
  hourlyUsageMetrics: [UsageMetricsHourlySnapshot!]!
    @derivedFrom(field: "protocol")

  " Daily financial metrics for this protocol "
  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")

  ##### rTokens #####

  " All rtokens that belong to this protocol "
  rTokens: [RToken!]! @derivedFrom(field: "protocol")
}

###############################
##### Protocol Timeseries #####
###############################

type UsageMetricsDailySnapshot @entity {
  " ID is # of days since Unix epoch time "
  id: ID!

  " Protocol this snapshot is associated with "
  protocol: Protocol!

  " Number of unique daily active users "
  dailyActiveUsers: Int!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface. "
  dailyTransactionCount: Int!

  " All daily RSR staked "
  dailyRSRStaked: BigInt!

  " Total USD value of stake rsr from the day"
  dailyRSRStakedUSD: BigDecimal!

  " Cumulative Staked RSR "
  cumulativeRSRStaked: BigInt!

  " Cumulative Staked RSR USD"
  cumulativeRSRStakedUSD: BigDecimal!

  " All daily RSR Unstaked "
  dailyRSRUnstaked: BigInt!

  " Total USD value of stake rsr from the day"
  dailyRSRUnstakedUSD: BigDecimal!

  " Cumulative Staked RSR "
  cumulativeRSRUnstaked: BigInt!

  " Cumulative Staked RSR USD"
  cumulativeRSRUnstakedUSD: BigDecimal!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

type UsageMetricsHourlySnapshot @entity {
  " { # of hours since Unix epoch time } "
  id: ID!

  " Protocol this snapshot is associated with "
  protocol: Protocol!

  " Number of unique hourly active users "
  hourlyActiveUsers: Int!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface. "
  hourlyTransactionCount: Int!

  " All daily RSR staked "
  hourlyRSRStaked: BigInt!

  " Total USD value of stake rsr from the day"
  hourlyRSRStakedUSD: BigDecimal!

  " Cumulative Staked RSR "
  cumulativeRSRStaked: BigInt!

  " Cumulative Staked RSR USD"
  cumulativeRSRStakedUSD: BigDecimal!

  " All hourly RSR Unstaked "
  hourlyRSRUnstaked: BigInt!

  " Total USD value of stake rsr from the day"
  hourlyRSRUnstakedUSD: BigDecimal!

  " Cumulative Staked RSR "
  cumulativeRSRUnstaked: BigInt!

  " Cumulative Staked RSR USD"
  cumulativeRSRUnstakedUSD: BigDecimal!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

type FinancialsDailySnapshot @entity {
  " ID is # of days since Unix epoch time "
  id: ID!

  " Protocol this snapshot is associated with "
  protocol: Protocol!

  " Total RSR staked on all RTokens "
  rsrStaked: BigInt!

  " Total USD equivalent RSR staked amount on the protocol "
  rsrStakedUSD: BigDecimal!

  " Total RSR locked on all RTokens "
  rsrLocked: BigInt!

  " Total USD equivalent RSR locked amount on the protocol "
  rsrLockedUSD: BigDecimal!

  " Current TVL (Total Value Locked) of the entire protocol "
  totalValueLockedUSD: BigDecimal!

  " Total RToken combinated supply "
  dailyVolumeUSD: BigDecimal!

  " Total rToken usd value "
  cumulativeVolumeUSD: BigDecimal!

  " Revenue given to RToken holders "
  cumulativeRTokenRevenueUSD: BigDecimal!

  " Revenue given to RSR Stakers "
  cumulativeRSRRevenueUSD: BigDecimal!

  " All revenue generated by the protocol from the collateral yield "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Total USD amount of all rTokens "
  totalRTokenUSD: BigDecimal!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

###########################
#### RToken-Level Data ####
###########################

type Collateral @entity {
  " Collateral erc20 address "
  id: ID!

  " Collateral erc20 symbol "
  symbol: String!
}

type RToken @entity {
  " RToken address "
  id: ID!

  " The protocol this pool belongs to "
  protocol: Protocol!

  " ERC20 token "
  token: Token!

  " stRSR Token "
  rewardToken: RewardToken!

  " Creation timestamp "
  createdTimestamp: BigInt!

  " Creation block number "
  createdBlockNumber: BigInt!

  ##### Roles ####
  " Token owner (can be governance address) "
  owners: [String!]!

  " Pausers "
  pausers: [String!]!

  " short freezers (this role is revoked after action) "
  freezers: [String!]!

  " long freezers (this role is revoked after action) "
  longFreezers: [String!]!

  ##### Quantitative Data ####
  " Collaterization of this rToken %"
  backing: BigInt!

  " Ratio of how much locked RSR there is corresponding to the mapping % "
  backingRSR: BigInt!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Total supply of rewardToken (stRSR) "
  rewardTokenSupply: BigInt!

  " Reward token exchange rate "
  rsrExchangeRate: BigDecimal!

  " Exchange rate on big int for internal calculations "
  rawRsrExchangeRate: BigInt!

  " How much RSR is currently locked in this RToken (overcollateralization) "
  rsrLocked: BigInt!

  " How much RSR is currently pooled in this RToken (earning rewards) "
  rsrStaked: BigInt!

  " USD equivalent RSR locked amount on the staking contract "
  rsrLockedUSD: BigDecimal!

  " USD equivalent RSR staked amount on the staking contract "
  rsrStakedUSD: BigDecimal!

  " Total RSR staked (cumulative) "
  totalRsrStaked: BigInt!

  " Total RSR unStaked (cumulative) "
  totalRsrUnstaked: BigInt!

  "Basket units of the rToken"
  basketsNeeded: BigInt!

  " holders rewards distribution share "
  holdersRewardShare: BigDecimal!

  " Stakers rewards distribution share % "
  stakersRewardShare: BigDecimal!

  " Revenue given to RToken holders "
  cumulativeRTokenRevenue: BigDecimal!

  " Revenue given to RSR Stakers "
  cumulativeStakerRevenue: BigDecimal!

  " Total revenue distributed in RSR "
  totalDistributedRSRRevenue: BigInt!

  " Total revenue distributed in RToken "
  totalDistributedRTokenRevenue: BigInt!

  " Targets units for the primary basket"
  targetUnits: String!

  " Collaterals "
  collaterals: [Collateral!]!

  " Collateral distribution "
  collateralDistribution: String!

  " Related auctions "
  trades: [Trade!]! @derivedFrom(field: "rToken")

  " Revenue distribution "
  revenueDistribution: [RevenueDistribution!]! @derivedFrom(field: "rToken")

  " Related contracts "
  contracts: [RTokenContract!]! @derivedFrom(field: "rToken")

  ##### Snapshots #####

  " RToken daily snapshots "
  dailySnapshots: [RTokenDailySnapshot!]! @derivedFrom(field: "rToken")

  " RToken hourly snapshots "
  hourlySnapshots: [RTokenHourlySnapshot!]! @derivedFrom(field: "rToken")

  " RToken historical baskets "
  historicalBaskets: [RTokenHistoricalBaskets!]! @derivedFrom(field: "rToken")
}

type RTokenDailySnapshot @entity {
  " { Smart contract address of the rToken }-{ # of days since Unix epoch time } "
  id: ID!

  " The protocol this snapshot belongs to "
  protocol: Protocol!

  " The rToken this snapshot belongs to "
  rToken: RToken!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!

  ##### Quantitative Data #####

  " Number of unique daily active users "
  dailyActiveUsers: Int!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " How much RSR is currently locked "
  rsrStaked: BigInt!

  " Total supply of rewardToken "
  rewardTokenSupply: BigInt!

  " Total RSR staked "
  dailyRSRStaked: BigInt!

  " cumulative RSR staked "
  cumulativeRSRStaked: BigInt!

  " Total RSR staked "
  dailyRSRUnstaked: BigInt!

  " cumulative RSR staked "
  cumulativeRSRUnstaked: BigInt!

  " Reward token exchange rate "
  rsrExchangeRate: BigDecimal!

  " Daily revenue given to RToken holders "
  dailyRTokenRevenueUSD: BigDecimal!

  " Revenue given to RToken holders "
  cumulativeRTokenRevenueUSD: BigDecimal!

  " Daily Revenue given to RSR Stakers "
  dailyRSRRevenueUSD: BigDecimal!

  " Revenue given to RSR Stakers "
  cumulativeRSRRevenueUSD: BigDecimal!

  " RSR price "
  rsrPrice: BigDecimal!
}

type RTokenHourlySnapshot @entity {
  " { Smart contract address of the rToken }-{ # of hours since Unix epoch time } "
  id: ID!

  " The protocol this snapshot belongs to "
  protocol: Protocol!

  " The pool this snapshot belongs to "
  rToken: RToken!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!

  ##### Quantitative Data #####

  " Number of unique daily active users "
  hourlyActiveUsers: Int!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Total supply of rewardToken "
  rewardTokenSupply: BigInt

  " How much RSR is currently locked "
  rsrStaked: BigInt!

  " Total RSR staked in an hour"
  hourlyRSRStaked: BigInt!

  " cumulative RSR staked "
  cumulativeRSRStaked: BigInt!

  " Total RSR staked "
  hourlyRSRUnstaked: BigInt!

  " cumulative RSR staked "
  cumulativeRSRUnstaked: BigInt!

  " Reward token exchange rate "
  rsrExchangeRate: BigDecimal!

  " Daily revenue given to RToken holders "
  hourlyRTokenRevenueUSD: BigDecimal!

  " Revenue given to RToken holders "
  cumulativeRTokenRevenueUSD: BigDecimal!

  " Hourly Revenue given to RSR Stakers "
  hourlyRSRRevenueUSD: BigDecimal!

  " Revenue given to RSR Stakers "
  cumulativeRSRRevenueUSD: BigDecimal!
}

type Trade @entity {
  " { Smart contract address of the auction } "
  id: ID!

  " GnosisAuctionId - Optional not required for dutchTrades "
  auctionId: BigInt

  " Auction trade amount "
  amount: BigDecimal!

  " Min buy amount "
  minBuyAmount: BigDecimal!

  " amount bought (on settle) "
  boughtAmount: BigDecimal

  " Worst case price "
  worstCasePrice: BigDecimal!

  " Selling token "
  selling: String!

  " Buying token "
  buying: String!

  " Sell tokens symbol "
  sellingTokenSymbol: String!

  "Sell token decimals"
  sellingTokenDecimals: Int!

  " Buy token symbol "
  buyingTokenSymbol: String!

  " Buying token decimals "
  buyingTokenDecimals: Int!

  " started At timestamp "
  startedAt: BigInt!

  " End time timestamp "
  endAt: BigInt!

  " rToken id "
  rToken: RToken!

  " Is settle check "
  isSettled: Boolean!

  " Settle tx hash "
  settleTxHash: String

  " Trade kind 0 = dutch 1 = batch "
  kind: Int!
}

#############################
####### Token Metadata ######
#############################

type RewardToken @entity {
  " { Reward token type }-{ Smart contract address of the reward token } "
  id: ID!

  " Reference to the actual token "
  token: Token!

  " RToken relation "
  rToken: RToken

  " The type of the reward token "
  type: RewardTokenType!
}

type Token @entity {
  " Smart contract address of the token "
  id: ID!

  " Name of the token, mirrored from the smart contract "
  name: String!

  " Symbol of the token, mirrored from the smart contract "
  symbol: String!

  " The number of decimal places this token uses, default to 18 "
  decimals: Int!

  " Number of unique token holders "
  holderCount: BigInt!

  " Number of unique token users "
  userCount: Int!

  " Total number of token transfer events "
  transferCount: BigInt!

  " Total number of token mint events "
  mintCount: BigInt!

  " Total number of token burn events "
  burnCount: BigInt!

  " Total token supply "
  totalSupply: BigInt!

  " Total token burned "
  totalBurned: BigInt!

  " Total token minted "
  totalMinted: BigInt!

  " Cumulative all time token transfers volume "
  cumulativeVolume: BigInt!

  " USD Price "
  lastPriceUSD: BigDecimal!

  " last market cap in USD"
  lastMarketCapUSD: BigDecimal!

  " Exchange rate between basket units to totalSupply of rToken "
  basketRate: BigDecimal!

  " Optional field to track the block number of the last token price "
  lastPriceTimestamp: BigInt!

  " RToken relation "
  rToken: RToken

  " List of token entries "
  records: [Entry!]! @derivedFrom(field: "token")

  " Token holder's balance "
  holdersBalance: [AccountBalance!]! @derivedFrom(field: "token")

  ##### Snapshots #####

  " Daily snapshot for this token "
  dailyTokenSnapshot: [TokenDailySnapshot!]! @derivedFrom(field: "token")

  " Hourly snapshot for this token "
  hourlyTokenSnapshot: [TokenHourlySnapshot!]! @derivedFrom(field: "token")
}

type RTokenContract @entity {
  " {Address of related contract} "
  id: ID!

  " Contract name "
  name: String!

  " Related rToken"
  rToken: RToken!
}

type RevenueDistribution @entity {
  " { Address Of the Account }-{ Address of the RToken } "
  id: ID!

  " Destination address "
  destination: String!

  " Number of shares in RToken "
  rTokenDist: Int!

  " Number of shares in RSR "
  rsrDist: Int!

  " RToken entity "
  rToken: RToken!
}

###############################
####### Token Timeseries ######
###############################

type TokenDailySnapshot @entity {
  " { Token Address }-{ # of days since Unix epoch time } "
  id: ID!

  " Token this snapshot is associated with "
  token: Token!

  " Daily total Supply of the token "
  dailyTotalSupply: BigInt!

  " # of accounts holding this token "
  dailyHolderCount: Int!

  " # of unique daily active users/holders "
  dailyActiveUsers: Int!

  " # of cumulative unique users/holders "
  cumulativeUniqueUsers: Int!

  " Total number of events occurred in a day "
  dailyEventCount: Int!

  " Total number of mints in a day "
  dailyMintCount: Int!

  " Total number of token minted in a day "
  dailyMintAmount: BigInt!

  " Total number of burns in a day "
  dailyBurnCount: Int!

  " Total number of token burnt in a day "
  dailyBurnAmount: BigInt!

  " Daily transfer volume "
  dailyVolume: BigInt!

  " USD Price "
  priceUSD: BigDecimal!

  " Exchange rate between basket units to totalSupply of rToken "
  basketRate: BigDecimal!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

type TokenHourlySnapshot @entity {
  " { Token Address }-{ # of hours since Unix epoch time } "
  id: ID!

  " Token this snapshot is associated with "
  token: Token!

  " Hourly total Supply of the token "
  hourlyTotalSupply: BigInt!

  " # of accounts holding this token "
  hourlyHolderCount: Int!

  " # of unique hourly active users "
  hourlyActiveUsers: Int!

  " # of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Total number of events occurred in an hour "
  hourlyEventCount: Int!

  " Total number of mints in a hour "
  hourlyMintCount: Int!

  " Total amount of token minted in a hour "
  hourlyMintAmount: BigInt!

  " Total number of burns in a hour "
  hourlyBurnCount: Int!

  " Total number of token burnt in a hour "
  hourlyBurnAmount: BigInt!

  " Hourly transfer volume "
  hourlyVolume: BigInt!

  " USD Price "
  priceUSD: BigDecimal!

  " Exchange rate between basket units to totalSupply of rToken "
  basketRate: BigDecimal!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

##################################
##### Event-Level Data #####
##################################

interface Event {
  " { Token ID }-{ Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The token this event belongs to "
  token: Token!

  " Nonce of the transaction that emitted this event "
  nonce: Int!

  " Account that sent the transaction "
  from: Account!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!
}

type Entry implements Event @entity {
  " { Token ID }-{ Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The token this event belongs to "
  token: Token!

  " Nonce of the transaction that emitted this event "
  nonce: Int!

  " Account that sent the transaction "
  from: Account!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Entry Type "
  type: String!

  " TRANSFER - Account that received the tokens "
  to: Account

  " The rToken this event belongs to "
  rToken: RToken

  " Stake/Unstake - staking token amount"
  stAmount: BigInt

  " Transaction amount "
  amount: BigInt

  " Transaction amount USD"
  amountUSD: BigDecimal
}

##################################
######## Account MetaData ########
##################################

# An account is a unique Ethereum address
type Account @entity {
  " Address of the account "
  id: ID!

  " rToken related transactions from this account "
  records: [Entry!]! @derivedFrom(field: "from")

  " rTokens related to this account "
  rTokens: [AccountRToken!]! @derivedFrom(field: "account")

  " rToken snapshots that this account holds "
  rTokensSnapshot: [AccountRTokenDailySnapshot!]! @derivedFrom(field: "account")

  " Token balances that this account holds "
  balances: [AccountBalance!]! @derivedFrom(field: "account")

  " Token balances snapshot that this account holds "
  balancesSnapshot: [AccountBalanceDailySnapshot!]!
    @derivedFrom(field: "account")
}

type AccountRToken @entity {
  " { Address Of the Account }-{ Address of the rToken } "
  id: ID!

  " Account address "
  account: Account!

  " rToken address "
  rToken: RToken!

  " Token balance "
  balance: AccountBalance!

  " Stake stRSR balance "
  stake: BigDecimal!

  governance: [TokenHolder!]! @derivedFrom(field: "accountRToken")

  " Total staked stRSR "
  totalStaked: BigInt!

  " Pending stRSR to be unstaked "
  pendingUnstake: BigInt!

  " Total Unstaked stRSR "
  totalUnstaked: BigInt!

  " Total historical stake RSR "
  totalRSRStaked: BigInt!

  " Total Unstaked "
  totalRSRUnstaked: BigInt!

  " Block number in which the stake was last modified "
  blockNumber: BigInt!

  " Timestamp in which the stake was last modified "
  timestamp: BigInt!

  " Records "
  records: [AccountStakeRecord!]! @derivedFrom(field: "account")
}

type AccountStakeRecord @entity {
  " { Address Of the Account }-{ Address of the rToken }-{ tx hash } "
  id: ID!

  " tx hash "
  hash: String!

  " Account related to "
  account: AccountRToken!

  " stRSR amount "
  amountRaw: BigInt!

  " readable amount "
  amount: BigDecimal!

  " RSR amount "
  rsrAmountRaw: BigInt!

  " Readable RSR amount "
  rsrAmount: BigDecimal!

  " RSR price "
  rsrPriceUSD: BigDecimal!

  " Exchange rate "
  exchangeRateRaw: BigInt!

  " readable exchange rate "
  exchangeRate: BigDecimal!

  " isStake "
  isStake: Boolean!

  " Block number "
  blockNumber: BigInt!

  " Timestamp "
  timestamp: BigInt!
}

type AccountBalance @entity {
  " { Address Of the Account }-{ Address of the Token }"
  id: ID!

  " Account address "
  account: Account!

  " Token address "
  token: Token!

  " Current account balance "
  amount: BigDecimal!

  " Transfer count "
  transferCount: Int!

  " Block number in which the balance was last modified "
  blockNumber: BigInt!

  " Timestamp in which the balance was last modified "
  timestamp: BigInt!
}

# Helper entity for calculating daily/hourly active users
type ActiveAccount @entity {
  " { Address of the account }-{ [Optional] token address }-{ Days since Unix epoch }-{ [Optional] HH: hour of the day } "
  id: ID!
}

###############################
###### Account Timeseries #####
###############################

type AccountBalanceDailySnapshot @entity {
  " { Address Of the Account }-{ Address of the Token }-{ # of hours since Unix epoch time } "
  id: ID!

  " Account address "
  account: Account!

  " Token address "
  token: Token!

  " Current account balance "
  amount: BigDecimal!

  " Transfer count "
  transferCount: Int!

  " Account balance USD "
  amountUSD: BigDecimal

  " Block number in which the balance was last modified "
  blockNumber: BigInt!

  " Timestamp in which the balance was last modified "
  timestamp: BigInt!
}

type AccountRTokenDailySnapshot @entity {
  " { Address Of the Account }-{ Address of the RToken }-{ # of hours since Unix epoch time } "
  id: ID!

  " Account address "
  account: Account!

  " rToken address "
  rToken: RToken!

  " Token balance snapshot if exists "
  balance: AccountBalanceDailySnapshot!

  " Stake stRSR balance "
  stake: BigDecimal!

  " Total staked stRSR "
  totalStaked: BigInt!

  " Total Unstaked stRSR "
  totalUnstaked: BigInt!

  " Total historical stake RSR "
  totalRSRStaked: BigInt!

  " Total Unstaked "
  totalRSRUnstaked: BigInt!

  " Block number in which the stake was last modified "
  blockNumber: BigInt!

  " Timestamp in which the stake was last modified "
  timestamp: BigInt!
}

#######################
###### Governance #####
#######################

type DelegateChange @entity(immutable: true) {
  "Unique entity used to keep track of delegate changes"
  id: ID!
  "Token address"
  tokenAddress: String!
  "Address for delegator"
  delegator: String!
  "Address for delegate"
  delegate: String!
  "Address for previous delegate"
  previousDelegate: String!
  "Block time change happened"
  blockTimestamp: BigInt!
  "Transaction hash of the delegate change event"
  txnHash: String!
  "Log index for delegate change"
  logIndex: BigInt!
  "Block number of event"
  blockNumber: BigInt!
}

type DelegateVotingPowerChange @entity(immutable: true) {
  "Unique entity used to keep track of voting power delta"
  id: ID!
  "Token addresss"
  tokenAddress: String!
  "Address for delegate"
  delegate: String!
  "Previous voting power of delegate"
  previousBalance: BigInt!
  "New voting power of delegate"
  newBalance: BigInt!
  "Block time change happened"
  blockTimestamp: BigInt!
  "Transaction hash of the voting power change"
  txnHash: String!
  "Log index for delegate voting power change"
  logIndex: BigInt!
  "Block number of event"
  blockNumber: BigInt!
}

# In theory this entity can be part of the RToken entity, but keeping it separate for now
type Governance @entity {
  " Address of the rToken "
  id: ID!

  rToken: RToken!

  "Total Supply of token"
  totalTokenSupply: BigInt!

  "Total number of token holders currently"
  currentTokenHolders: BigInt!

  "Total number of token holders"
  totalTokenHolders: BigInt!

  "Total number of delegates participating on the governance currently"
  currentDelegates: BigInt!

  "Total number of delegates that held delegated votes"
  totalDelegates: BigInt!

  "Total number of votes delegated expressed in the smallest unit of the token"
  delegatedVotesRaw: BigInt!

  "Total number of votes delegated expressed as a BigDecimal normalized value for the token"
  delegatedVotes: BigDecimal!

  "Total number of proposals created"
  proposals: BigInt!

  "Number of proposals currently queued for execution"
  proposalsQueued: BigInt!

  "Number of proposals currently executed"
  proposalsExecuted: BigInt!

  "Number of proposals currently canceled"
  proposalsCanceled: BigInt!

  "Governance frameworks (ideally this is just Alexios)"
  governanceFrameworks: [GovernanceFramework!]!
    @derivedFrom(field: "governance")

  "Guardian role"
  guardians: [String!]!

  " Proposal list "
  proposalList: [Proposal!]! @derivedFrom(field: "governance")
}

type GovernanceFramework @entity {
  "Governance contract addresss"
  id: ID!
  "Name of the governance framework"
  name: String!
  "Governance framework contract address"
  contractAddress: String!
  "The contract address associated with the contract that manages the delay of administrative actions for the governance framework"
  timelockAddress: String!
  "timelock execution delay"
  executionDelay: BigInt!

  "The delay before voting on a proposal may take place in blocks"
  votingDelay: BigInt!
  "The duration of voting on a proposal in blocks"
  votingPeriod: BigInt!
  "The number of votes required in order for a voter to become a proposer"
  proposalThreshold: BigInt!

  "The number of votes for a proposal to succeed."
  quorumVotes: BigInt
  "Quorum fraction numerator value. (OZ: quorum = totalSupply * numerator / denominator)"
  quorumNumerator: BigInt
  "Quorum fraction denominator value. (OZ: quorum = totalSupply * numerator / denominator)"
  quorumDenominator: BigInt

  "RToken related to"
  governance: Governance!
}

" Match timelock id with proposal id "
type TimelockProposal @entity {
  " Timelock id "
  id: ID!
  " Proposal entity ID "
  proposalId: String!
}

type Proposal @entity {
  " Internal proposal ID (uint256) "
  id: ID!
  "Transaction hash of the proposal creation"
  txnHash: String!
  "Proposal description in markdown format"
  description: String!
  "Governance Framework that proposal is part of"
  governanceFramework: GovernanceFramework!
  "RToken related to"
  governance: Governance!

  "Delegate that proposed the proposal"
  proposer: Delegate!
  "State of the proposal"
  state: ProposalState!
  "The number of votes for a proposal to succeed."
  quorumVotes: BigInt!
  "Number of tokenholders at start of voting"
  tokenHoldersAtStart: BigInt!
  "Number of delegates at start of voting"
  delegatesAtStart: BigInt!

  "Number of delegates that voted against the proposal"
  againstDelegateVotes: BigInt!
  "Number of delegates that voted for the proposal"
  forDelegateVotes: BigInt!
  "Number of delegates that voted abstain to the proposal"
  abstainDelegateVotes: BigInt!
  "Total number of delegates that voted on the proposal"
  totalDelegateVotes: BigInt!

  "Weighted votes against the proposal"
  againstWeightedVotes: BigInt!
  "Weighted votes for the proposal"
  forWeightedVotes: BigInt!
  "Weighted votes abstaining to the proposal"
  abstainWeightedVotes: BigInt!
  "Total weighted for/against/abstaining votes"
  totalWeightedVotes: BigInt!

  "Votes associated to this proposal"
  votes: [Vote!]! @derivedFrom(field: "proposal")

  "Block number proposal was created in"
  creationBlock: BigInt!
  "Timestamp of block proposal was created in"
  creationTime: BigInt!
  "Block number from where the voting starts"
  startBlock: BigInt!
  "Block number from where the voting ends"
  endBlock: BigInt!
  "Transaction hash of the proposal being queued"
  queueTxnHash: String
  "Block number proposal was queued in"
  queueBlock: BigInt
  "Timestamp of block proposal was queued in"
  queueTime: BigInt
  "executionStartBlock"
  executionStartBlock: BigInt
  "Once the proposal is queued for execution it will have an ETA of the execution"
  executionETA: BigInt
  "Transaction hash of the proposal execution"
  executionTxnHash: String
  "Block number proposal was executed in"
  executionBlock: BigInt
  "Timestamp of block proposal was executed in"
  executionTime: BigInt
  "Transaction hash of the proposal cancellation"
  cancellationTxnHash: String
  "Block number proposal was canceled in"
  cancellationBlock: BigInt
  "Timestamp of block proposal was canceled in"
  cancellationTime: BigInt

  "Targets data for the change"
  targets: [String!]
  "Values data for the change"
  values: [BigInt!]
  "Signature data for the change"
  signatures: [String!]
  "Call data for the change"
  calldatas: [Bytes!]
}

enum ProposalState {
  PENDING
  ACTIVE
  CANCELED
  DEFEATED
  SUCCEEDED
  QUEUED
  EXPIRED
  EXECUTED
}

type Vote @entity(immutable: true) {
  "Delegate ID + Proposal ID"
  id: ID!
  "Whether the vote is in favour, against or abstaining to the proposal"
  choice: VoteChoice!
  "Voting weight expressed in the vote"
  weight: BigInt!
  "Reason for voting choice"
  reason: String
  "Delegate that emitted the vote"
  voter: Delegate!
  "Proposal that is being voted on"
  proposal: Proposal!

  "Block number vote is cast in"
  block: BigInt!
  "Timestamp of block vote was cast in"
  blockTime: BigInt!
  "Transaction hash of the vote"
  txnHash: String!
  "Log Index of the event"
  logIndex: BigInt!
  "Unique ID based on the blockTime and logIndex"
  blockTimeId: String!
}

enum VoteChoice {
  FOR
  AGAINST
  ABSTAIN
}

type TokenHolder @entity {
  "A TokenHolder is any address that holds any amount of tokens, the id used is the blockchain address."
  id: ID!
  "Holder address"
  address: String!
  "Delegate address of the token holder which will participate in votings. Delegates don't need to hold any tokens and can even be the token holder itself."
  delegate: Delegate
  "Governance"
  governance: Governance!
  "Token balance of this address expressed in the smallest unit of the token"
  tokenBalanceRaw: BigInt!
  "Token balance of this address expressed as a BigDecimal normalized value"
  tokenBalance: BigDecimal!
  "Total amount of tokens ever held by this address expressed in the smallest unit of the token"
  totalTokensHeldRaw: BigInt!
  "Total amount of tokens ever held by this address expressed as a BigDecimal normalized value"
  totalTokensHeld: BigDecimal!
  "AccountRToken relationship"
  accountRToken: AccountRToken!
}

type Delegate @entity {
  "A Delegate is any address that has been delegated with voting tokens by a token holder, id is the blockchain address of said delegate"
  id: ID!

  "Delegate address"
  address: String!

  "Amount of votes delegated to this delegate to be used on proposal votings expressed in the smallest unit of the token"
  delegatedVotesRaw: BigInt!
  "Amount of votes delegated to this delegate to be used on proposal votings expressed as a BigDecimal normalized value"
  delegatedVotes: BigDecimal!

  "Total token holders that this delegate represents"
  tokenHoldersRepresentedAmount: Int!
  "Token holders that this delegate represents"
  tokenHoldersRepresented: [TokenHolder!]! @derivedFrom(field: "delegate")

  "Votes that a delegate has made in different proposals"
  votes: [Vote!]! @derivedFrom(field: "voter")
  "Number of proposals voted on"
  numberVotes: Int!

  "Proposals that the delegate has created"
  proposals: [Proposal!]! @derivedFrom(field: "proposer")

  "Governance this delegate is related to"
  governance: Governance!
}

# Timeseries Data
type stTokenDailySnapshot @entity {
  "Number of days from Unix epoch time"
  id: ID!
  "Total Supply at snapshot"
  totalSupply: BigInt!
  "Number of tokenholders at snapshot"
  tokenHolders: BigInt!
  "Number of delegates at snapshot"
  delegates: BigInt!
  "Block number of last block in snapshot"
  blockNumber: BigInt!
  "Timestamp of snapshot"
  timestamp: BigInt!
  "Governance"
  governance: Governance!
}

type VoteDailySnapshot @entity {
  "Number of days from Unix epoch time"
  id: ID!
  "Proposal this snapshot is associated with"
  proposal: Proposal!
  "Weighted votes against the proposal at snapshot"
  forWeightedVotes: BigInt!
  "Weighted votes abstaining to the proposal at snapshot"
  againstWeightedVotes: BigInt!
  "Weighted votes for the proposal at snapshot"
  abstainWeightedVotes: BigInt!
  "Total weighted for/against/abstaining votes at snapshot"
  totalWeightedVotes: BigInt!
  "Block number of last block in snapshot"
  blockNumber: BigInt!
  "Timestamp of snapshot"
  timestamp: BigInt!
}

type RTokenHistoricalBaskets @entity {
  " RToken address "
  id: ID!

  " The rToken this entity belongs to "
  rToken: RToken!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!

  " Targets units for the primary basket"
  targetUnits: String!

  " Collaterals "
  collaterals: [Collateral!]!

  " Collateral distribution "
  collateralDistribution: String!

  " Number of shares in RToken "
  rTokenDist: Int!
}
