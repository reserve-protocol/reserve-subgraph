# Subgraph Schema: Generic
# Version: 1.3.0
# See https://github.com/messari/subgraphs/blob/master/docs/Schema.md for details

enum Network {
  ARBITRUM_ONE
  ARWEAVE_MAINNET
  AURORA
  AVALANCHE
  BOBA
  BSC # aka BNB Chain
  CELO
  COSMOS
  CRONOS
  MAINNET # Ethereum Mainnet
  FANTOM
  FUSE
  HARMONY
  JUNO
  MOONBEAM
  MOONRIVER
  NEAR_MAINNET
  OPTIMISM
  OSMOSIS
  MATIC # aka Polygon
  XDAI # aka Gnosis Chain
}

enum ProtocolType {
  EXCHANGE
  LENDING
  YIELD
  BRIDGE
  GENERIC
  # Will add more
}

enum RewardTokenType {
  " For reward tokens awarded to LPs/lenders "
  DEPOSIT
  " For reward tokens awarded to borrowers "
  BORROW
}

enum EntryType {
  TRANSFER # ERC20 Token transfer
  ISSUE # Issuance
  REDEEM # Issuance
  CLAIM # Issuance
  CANCEL_ISSUANCE # Cancel Issuance
  STAKE # stake
  UNSTAKE # stake
  WITHDRAW # stake
}

enum GovernanceType {
  ALEXIOS # v1 Reserve version of governance
  CUSTOM # arbitrary address
}

#############################
##### Protocol Metadata #####
#############################

type Protocol @entity {
  " Smart contract address of the protocol's main contract (Factory, Registry, etc) "
  id: ID!

  " Name of the protocol, including version. e.g. Uniswap v3 "
  name: String!

  " Slug of protocol, including version. e.g. uniswap-v3 "
  slug: String!

  " Version of the subgraph schema, in SemVer format (e.g. 1.0.0) "
  schemaVersion: String!

  " Version of the subgraph implementation, in SemVer format (e.g. 1.0.0) "
  subgraphVersion: String!

  " Version of the methodology used to compute metrics, loosely based on SemVer format (e.g. 1.0.0) "
  methodologyVersion: String!

  " The blockchain network this subgraph is indexing on "
  network: Network!

  " The type of protocol (e.g. DEX, Lending, Yield, etc) "
  type: ProtocolType!

  ##### Quantitative Data #####

  " Total RSR locked for insurance "
  insurance: BigInt!

  " Total USD equivalent RSR insurance amount on the protocol "
  insuranceUSD: BigDecimal!

  " Current TVL (Total Value Locked) of the entire protocol "
  totalValueLockedUSD: BigDecimal!

  " cumulativeVolumeUSD token transfers value "
  cumulativeVolumeUSD: BigDecimal!

  " Revenue given to RToken holders "
  cumulativeRTokenRevenueUSD: BigDecimal!

  " Revenue given to RSR Stakers "
  cumulativeInsuranceRevenueUSD: BigDecimal!

  " All revenue generated by the protocol from the collateral yield "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Current amount of RSR staked across all rTokens "
  rsrStaked: BigInt!

  " Total USD of staked rsr "
  rsrStakedUSD: BigDecimal!

  " Total RSR staked "
  rsrUnstaked: BigInt!

  " Total USD of stake rsr "
  rsrUnstakedUSD: BigDecimal!

  " Total rToken usd value "
  totalRTokenUSD: BigDecimal!

  " Total number of rTokens "
  rTokenCount: Int!

  " Total number of transactions across all rTokens "
  transactionCount: BigInt!

  ##### Snapshots #####

  " Daily usage metrics for this protocol "
  dailyUsageMetrics: [UsageMetricsDailySnapshot!]!
    @derivedFrom(field: "protocol")

  " Hourly usage metrics for this protocol "
  hourlyUsageMetrics: [UsageMetricsHourlySnapshot!]!
    @derivedFrom(field: "protocol")

  " Daily financial metrics for this protocol "
  financialMetrics: [FinancialsDailySnapshot!]! @derivedFrom(field: "protocol")

  ##### rTokens #####

  " All rtokens that belong to this protocol "
  rTokens: [RToken!]! @derivedFrom(field: "protocol")
}

###############################
##### Protocol Timeseries #####
###############################

type UsageMetricsDailySnapshot @entity {
  " ID is # of days since Unix epoch time "
  id: ID!

  " Protocol this snapshot is associated with "
  protocol: Protocol!

  " Number of unique daily active users "
  dailyActiveUsers: Int!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Total number of transactions occurred in a day. Transactions include all entities that implement the Event interface. "
  dailyTransactionCount: Int!

  " All daily RSR staked "
  dailyRSRStaked: BigInt!

  " Total USD value of stake rsr from the day"
  dailyRSRStakedUSD: BigDecimal!

  " Cumulative Staked RSR "
  cumulativeRSRStaked: BigInt!

  " Cumulative Staked RSR USD"
  cumulativeRSRStakedUSD: BigDecimal!

  " All daily RSR Unstaked "
  dailyRSRUnstaked: BigInt!

  " Total USD value of stake rsr from the day"
  dailyRSRUnstakedUSD: BigDecimal!

  " Cumulative Staked RSR "
  cumulativeRSRUnstaked: BigInt!

  " Cumulative Staked RSR USD"
  cumulativeRSRUnstakedUSD: BigDecimal!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

type UsageMetricsHourlySnapshot @entity {
  " { # of hours since Unix epoch time } "
  id: ID!

  " Protocol this snapshot is associated with "
  protocol: Protocol!

  " Number of unique hourly active users "
  hourlyActiveUsers: Int!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Total number of transactions occurred in an hour. Transactions include all entities that implement the Event interface. "
  hourlyTransactionCount: Int!

  " All daily RSR staked "
  hourlyRSRStaked: BigInt!

  " Total USD value of stake rsr from the day"
  hourlyRSRStakedUSD: BigDecimal!

  " Cumulative Staked RSR "
  cumulativeRSRStaked: BigInt!

  " Cumulative Staked RSR USD"
  cumulativeRSRStakedUSD: BigDecimal!

  " All hourly RSR Unstaked "
  hourlyRSRUnstaked: BigInt!

  " Total USD value of stake rsr from the day"
  hourlyRSRUnstakedUSD: BigDecimal!

  " Cumulative Staked RSR "
  cumulativeRSRUnstaked: BigInt!

  " Cumulative Staked RSR USD"
  cumulativeRSRUnstakedUSD: BigDecimal!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

type FinancialsDailySnapshot @entity {
  " ID is # of days since Unix epoch time "
  id: ID!

  " Protocol this snapshot is associated with "
  protocol: Protocol!

  " Total RSR locked for insurance "
  insurance: BigInt!

  " Total USD equivalent RSR insurance amount on the protocol "
  insuranceUSD: BigDecimal!

  " Current TVL (Total Value Locked) of the entire protocol "
  totalValueLockedUSD: BigDecimal!

  " Total RToken combinated supply "
  dailyVolumeUSD: BigDecimal!

  " Total rToken usd value "
  cumulativeVolumeUSD: BigDecimal!

  " Revenue given to RToken holders "
  cumulativeRTokenRevenueUSD: BigDecimal!

  " Revenue given to RSR Stakers "
  cumulativeInsuranceRevenueUSD: BigDecimal!

  " All revenue generated by the protocol from the collateral yield "
  cumulativeTotalRevenueUSD: BigDecimal!

  " Total USD amount of all rTokens "
  totalRTokenUSD: BigDecimal!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

###########################
#### RToken-Level Data ####
###########################

type RToken @entity {
  " RToken address "
  id: ID!

  " The protocol this pool belongs to "
  protocol: Protocol!

  " ERC20 token "
  token: Token!

  " stRSR Token "
  rewardToken: RewardToken!

  " Creation timestamp "
  createdTimestamp: BigInt!

  " Creation block number "
  createdBlockNumber: BigInt!

  " Governance type: custom/alexios "
  governanceType: GovernanceType

  ##### Roles ####
  " Token owner (can be governance address) "
  owners: [String!]!

  " Pausers "
  pausers: [String!]!

  " short freezers (this role is revoked after action) "
  freezers: [String!]!

  " long freezers (this role is revoked after action) "
  longFreezers: [String!]!

  ##### Quantitative Data ####
  " Collaterization of this rToken %"
  backing: BigInt!

  " Ratio of how much insurance there is corresponding to the mapping % "
  backingInsurance: BigInt!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Total supply of rewardToken (stRSR) "
  rewardTokenSupply: BigInt!

  " RSR token price "
  rsrPriceUSD: BigDecimal!

  " RSR Price last updated block to avoid re-fetching"
  rsrPriceLastBlock: BigInt!

  " Reward token exchange rate "
  rsrExchangeRate: BigDecimal!

  " How much RSR is currently held for insurance "
  insurance: BigInt!

  " Total RSR staked "
  rsrStaked: BigInt!

  " Total RSR unStaked "
  rsrUnstaked: BigInt!

  " Exchange rate between basket units to totalSupply of rToken "
  basketRate: BigDecimal!

  " Revenue given to RToken holders "
  cumulativeRTokenRevenueUSD: BigDecimal!

  " Revenue given to RSR Stakers "
  cumulativeInsuranceRevenueUSD: BigDecimal!

  " Targets units for the primary basket"
  targetUnits: String!

  " Related auctions "
  trades: [Trade!]! @derivedFrom(field: "rToken")

  ##### Snapshots #####

  " RToken daily snapshots "
  dailySnapshots: [RTokenDailySnapshot!]! @derivedFrom(field: "rToken")

  " RToken hourly snapshots "
  hourlySnapshots: [RTokenHourlySnapshot!]! @derivedFrom(field: "rToken")
}

type RTokenDailySnapshot @entity {
  " { Smart contract address of the rToken }-{ # of days since Unix epoch time } "
  id: ID!

  " The protocol this snapshot belongs to "
  protocol: Protocol!

  " The rToken this snapshot belongs to "
  rToken: RToken!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!

  ##### Quantitative Data #####

  " Number of unique daily active users "
  dailyActiveUsers: Int!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " How much RSR is currently held for insurance "
  insurance: BigInt!

  " Total supply of rewardToken "
  rewardTokenSupply: BigInt!

  " Reward token price "
  rsrPriceUSD: BigDecimal!

  " Total RSR staked "
  dailyRSRStaked: BigInt!

  " cumulative RSR staked "
  cumulativeRSRStaked: BigInt!

  " Total RSR staked "
  dailyRSRUnstaked: BigInt!

  " cumulative RSR staked "
  cumulativeRSRUnstaked: BigInt!

  " Reward token exchange rate "
  rsrExchangeRate: BigDecimal!

  " Exchange rate between basket units to totalSupply of rToken "
  basketRate: BigDecimal!

  " Daily revenue given to RToken holders "
  dailyRTokenRevenueUSD: BigDecimal!

  " Revenue given to RToken holders "
  cumulativeRTokenRevenueUSD: BigDecimal!

  " Daily Revenue given to RSR Stakers "
  dailyInsuranceRevenueUSD: BigDecimal!

  " Revenue given to RSR Stakers "
  cumulativeInsuranceRevenueUSD: BigDecimal!
}

type RTokenHourlySnapshot @entity {
  " { Smart contract address of the rToken }-{ # of hours since Unix epoch time } "
  id: ID!

  " The protocol this snapshot belongs to "
  protocol: Protocol!

  " The pool this snapshot belongs to "
  rToken: RToken!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!

  ##### Quantitative Data #####

  " Number of unique daily active users "
  hourlyActiveUsers: Int!

  " Number of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Total supply of rewardToken "
  rewardTokenSupply: BigInt

  " Reward token price "
  rsrPriceUSD: BigDecimal

  " How much RSR is currently held for insurance "
  insurance: BigInt!

  " Total RSR staked in an hour"
  hourlyRSRStaked: BigInt!

  " cumulative RSR staked "
  cumulativeRSRStaked: BigInt!

  " Total RSR staked "
  hourlyRSRUnstaked: BigInt!

  " cumulative RSR staked "
  cumulativeRSRUnstaked: BigInt!

  " Reward token exchange rate "
  rsrExchangeRate: BigDecimal!

  " Exchange rate between basket units to totalSupply of rToken "
  basketRate: BigDecimal!

  " Daily revenue given to RToken holders "
  hourlyRTokenRevenueUSD: BigDecimal!

  " Revenue given to RToken holders "
  cumulativeRTokenRevenueUSD: BigDecimal!

  " Hourly Revenue given to RSR Stakers "
  hourlyInsuranceRevenueUSD: BigDecimal!

  " Revenue given to RSR Stakers "
  cumulativeInsuranceRevenueUSD: BigDecimal!
}

type Trade @entity {
  " { RTokenId }-{ Smart contract address of the auction } "
  id: ID!
  " GnosisAuctionId "
  auctionId: BigInt!
  " Auction trade amount "
  amount: BigDecimal!
  " Worst case price "
  worstCasePrice: BigDecimal!
  " Selling token "
  selling: String!
  " Buying token "
  buying: String!
  " started At timestamp "
  startedAt: BigInt!
  " End time timestamp "
  endAt: BigInt!
  " rToken id "
  rToken: RToken!
}

#############################
####### Token Metadata ######
#############################

type RewardToken @entity {
  " { Reward token type }-{ Smart contract address of the reward token } "
  id: ID!
  " Reference to the actual token "
  token: Token!
  " RToken relation "
  rToken: RToken
  " The type of the reward token "
  type: RewardTokenType!
}

type Token @entity {
  " Smart contract address of the token "
  id: ID!

  " Name of the token, mirrored from the smart contract "
  name: String!

  " Symbol of the token, mirrored from the smart contract "
  symbol: String!

  " The number of decimal places this token uses, default to 18 "
  decimals: Int!

  " Number of unique token holders "
  holderCount: BigInt!

  " Number of unique token users "
  userCount: Int!

  " Total number of token transfer events "
  transferCount: BigInt!

  " Total number of token mint events "
  mintCount: BigInt!

  " Total number of token burn events "
  burnCount: BigInt!

  " Total token supply "
  totalSupply: BigInt!

  " Total token burned "
  totalBurned: BigInt!

  " Total token minted "
  totalMinted: BigInt!

  " Cumulative all time token transfers volume "
  cumulativeVolume: BigInt!

  " USD Price "
  lastPriceUSD: BigDecimal!

  " Optional field to track the block number of the last token price "
  lastPriceBlockNumber: BigInt!

  " RToken relation "
  rToken: RToken

  " List of token entries "
  records: [Entry!]! @derivedFrom(field: "token")

  " Token holder's balance "
  holdersBalance: [AccountBalance!]! @derivedFrom(field: "token")

  ##### Snapshots #####

  " Daily snapshot for this token "
  dailyTokenSnapshot: [TokenDailySnapshot!]! @derivedFrom(field: "token")

  " Hourly snapshot for this token "
  hourlyTokenSnapshot: [TokenHourlySnapshot!]! @derivedFrom(field: "token")
}

###############################
####### Token Timeseries ######
###############################

type TokenDailySnapshot @entity {
  " { Token Address }-{ # of days since Unix epoch time } "
  id: ID!

  " Token this snapshot is associated with "
  token: Token!

  " Daily total Supply of the token "
  dailyTotalSupply: BigInt!

  " # of accounts holding this token "
  dailyHolderCount: Int!

  " # of unique daily active users/holders "
  dailyActiveUsers: Int!

  " # of cumulative unique users/holders "
  cumulativeUniqueUsers: Int!

  " Total number of events occurred in a day "
  dailyEventCount: Int!

  " Total number of mints in a day "
  dailyMintCount: Int!

  " Total number of token minted in a day "
  dailyMintAmount: BigInt!

  " Total number of burns in a day "
  dailyBurnCount: Int!

  " Total number of token burnt in a day "
  dailyBurnAmount: BigInt!

  " Daily transfer volume "
  dailyVolume: BigInt!

  " USD Price "
  priceUSD: BigDecimal!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

type TokenHourlySnapshot @entity {
  " { Token Address }-{ # of hours since Unix epoch time } "
  id: ID!

  " Token this snapshot is associated with "
  token: Token!

  " Hourly total Supply of the token "
  hourlyTotalSupply: BigInt!

  " # of accounts holding this token "
  hourlyHolderCount: Int!

  " # of unique hourly active users "
  hourlyActiveUsers: Int!

  " # of cumulative unique users "
  cumulativeUniqueUsers: Int!

  " Total number of events occurred in an hour "
  hourlyEventCount: Int!

  " Total number of mints in a hour "
  hourlyMintCount: Int!

  " Total amount of token minted in a hour "
  hourlyMintAmount: BigInt!

  " Total number of burns in a hour "
  hourlyBurnCount: Int!

  " Total number of token burnt in a hour "
  hourlyBurnAmount: BigInt!

  " Hourly transfer volume "
  hourlyVolume: BigInt!

  " USD Price "
  priceUSD: BigDecimal!

  " Block number of this snapshot "
  blockNumber: BigInt!

  " Timestamp of this snapshot "
  timestamp: BigInt!
}

##################################
##### Event-Level Data #####
##################################

interface Event {
  " { Token ID }-{ Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The token this event belongs to "
  token: Token!

  " Nonce of the transaction that emitted this event "
  nonce: Int!

  " Account that sent the transaction "
  from: Account!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!
}

type Entry implements Event @entity {
  " { Token ID }-{ Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " The token this event belongs to "
  token: Token!

  " Nonce of the transaction that emitted this event "
  nonce: Int!

  " Account that sent the transaction "
  from: Account!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Entry Type "
  type: String!

  " TRANSFER - Account that received the tokens "
  to: Account

  " The rToken this event belongs to "
  rToken: RToken

  " Stake/Unstake - staking token amount"
  stAmount: BigInt

  " Transaction amount "
  amount: BigInt

  " Transaction amount USD"
  amountUSD: BigDecimal
}

##################################
######## Account MetaData ########
##################################

# An account is a unique Ethereum address
type Account @entity {
  " Address of the account "
  id: ID!

  " rToken/RSV related transactions from this account "
  records: [Entry!]! @derivedFrom(field: "from")

  " rTokens related to this account "
  rTokens: [AccountRToken!]! @derivedFrom(field: "account")

  " rToken snapshots that this account holds "
  rTokensSnapshot: [AccountRTokenDailySnapshot!]! @derivedFrom(field: "account")

  " Token balances that this account holds "
  balances: [AccountBalance!]! @derivedFrom(field: "account")

  " Token balances snapshot that this account holds "
  balancesSnapshot: [AccountBalanceDailySnapshot!]!
    @derivedFrom(field: "account")
}

type AccountRToken @entity {
  " { Address Of the Account }-{ Address of the rToken } "
  id: ID!

  " Account address "
  account: Account!

  " rToken address "
  rToken: RToken!

  " Token balance "
  balance: AccountBalance!

  " Stake stRSR balance "
  stake: BigDecimal!

  " Block number in which the stake was last modified "
  blockNumber: BigInt!

  " Timestamp in which the stake was last modified "
  timestamp: BigInt!
}

type AccountBalance @entity {
  " { Address Of the Account }-{ Address of the Token }"
  id: ID!

  " Account address "
  account: Account!

  " Token address "
  token: Token!

  " Current account balance "
  amount: BigDecimal!

  " Transfer count "
  transferCount: Int!

  " Block number in which the balance was last modified "
  blockNumber: BigInt!

  " Timestamp in which the balance was last modified "
  timestamp: BigInt!
}

# Helper entity for calculating daily/hourly active users
type ActiveAccount @entity {
  " { Address of the account }-{ [Optional] token address }-{ Days since Unix epoch }-{ [Optional] HH: hour of the day } "
  id: ID!
}

###############################
###### Account Timeseries #####
###############################

type AccountBalanceDailySnapshot @entity {
  " { Address Of the Account }-{ Address of the Token }-{ # of hours since Unix epoch time } "
  id: ID!

  " Account address "
  account: Account!

  " Token address "
  token: Token!

  " Current account balance "
  amount: BigDecimal!

  " Transfer count "
  transferCount: Int!

  " Account balance USD "
  amountUSD: BigDecimal

  " Block number in which the balance was last modified "
  blockNumber: BigInt!

  " Timestamp in which the balance was last modified "
  timestamp: BigInt!
}

type AccountRTokenDailySnapshot @entity {
  " { Address Of the Account }-{ Address of the RToken }-{ # of hours since Unix epoch time } "
  id: ID!

  " Account address "
  account: Account!

  " rToken address "
  rToken: RToken!

  " Token balance snapshot if exists "
  balance: AccountBalanceDailySnapshot!

  " Stake stRSR balance "
  stake: BigDecimal!

  " Block number in which the stake was last modified "
  blockNumber: BigInt!

  " Timestamp in which the stake was last modified "
  timestamp: BigInt!
}

type RTokenContract @entity {
  " {Address of related contract} "
  id: ID!
  " Address of the related rToken"
  rToken: String!
}
